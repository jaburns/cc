#!/usr/bin/env bash
set -e
#-------------------------------------------------------------------------------

if [[ ! -f 'jaburns_cc/sdlvk_app/build.sh' ]]; then
    echo 'Run build.sh from the root of the project directory'
    exit 1
fi
if [[ ! -f config.ini ]]; then
    echo 'Missing config.ini'
    exit 1
fi

#-------------------------------------------------------------------------------

read_config_ini() {
    local val="$(cat config.ini | grep "$1\\s*=" | sed 's/;.*//' | sed 's/^.*=//')"
    val="${val#"${val%%[![:space:]]*}"}"
    val="${val%"${val##*[![:space:]]}"}"
    if [[ -z "$val" ]]; then
        >&2 echo "Missing key '$1' in config.ini"
        exit 1
    fi
    printf '%s' "$val"
}

[[ "$1" == '--dll-only'     ]] && DLL_ONLY=1
[[ "$1" == '--shaders-only' ]] && SHADERS_ONLY=1

DEBUG="$(read_config_ini debug)"
EDITOR="$(read_config_ini editor)"
TEST="$(read_config_ini test)"
VERIFY="$(read_config_ini verify)"

VKSDK="$(read_config_ini vulkan_sdk)"
SDLSDK="$(read_config_ini sdl2_sdk)"

#-------------------------------------------------------------------------------

verify_includes_for_dir() {
    local files="$(find "$1" -iname '*.cc')"
    for file in $files; do
        [[ "$file" == *'inc.cc'* ]] && continue
        echo "Verifying $file..."
        clang -std=c++20 -O0 -Wno-undefined-internal -c "$file" -o /tmp/tmp.o
    done
}

verify_includes() {
    verify_includes_for_dir jaburns_cc
    verify_includes_for_dir src
}

#-------------------------------------------------------------------------------

update_vscode_config() {
    {
        echo '# Generated by build.sh'
        echo "VULKAN_SDK=$VKSDK"
        echo "PATH=$VKSDK/bin:\$PATH"
        echo "DYLD_LIBRARY_PATH=$VKSDK/lib:\$DYLD_LIBRARY_PATH"
        echo "VK_ICD_FILENAMES=$VKSDK/share/vulkan/icd.d/MoltenVK_icd.json"
        echo "VK_LAYER_PATH=$VKSDK/share/vulkan/explicit_layer.d"
    } > .vscode/.env

    sed "s~^.*\"includePath\":.*$~\"includePath\": [\"$SDLSDK/include\", \"$VKSDK/include\"]~" \
        jaburns_cc/sdlvk_app/vscode.c_cpp_properties.json > .vscode/c_cpp_properties.json

    cp jaburns_cc/sdlvk_app/vscode.launch.json   .vscode/launch.json
    cp jaburns_cc/sdlvk_app/vscode.settings.json .vscode/settings.json
    cp jaburns_cc/sdlvk_app/vscode.tasks.json    .vscode/tasks.json
}

#-------------------------------------------------------------------------------

build_shaders() {
    [[ ! -d "assets/shaders" ]] && return
    mkdir -p assets/shaders/bin

    for shader in $(ls -l1 assets/shaders/*.slang); do
        local name="$(basename -- "$shader")"
        name="${name%.*}"

        local entrypoints="$(
            grep '^\[shader(".*")\]$' "$shader" -A 1 \
            | grep -v '^\[shader(".*")\]$' \
            | grep -v '^--$' \
            | sed 's/^.* //;s/(.*$//' \
        )"
        for entry in $entrypoints; do
            if [[ "assets/shaders/${name}.slang" -nt "assets/shaders/bin/${name}.${entry}.spv" ]]; then
                "$VKSDK/bin/slangc" -target spirv -profile spirv_1_3 -entry "${entry}" "assets/shaders/${name}.slang" -o "assets/shaders/bin/${name}.${entry}.spv"
            fi
        done
    done
}

#-------------------------------------------------------------------------------

CARGS="
    -DDEBUG=$DEBUG
    -DTEST=$TEST
    -DEDITOR=$EDITOR
    -Wall
    -Werror
    -Wswitch-enum
    -Wno-unused-function
    -Wno-logical-op-parentheses
    -fno-exceptions
    -fno-rtti
    -I$VKSDK/include
    -I$SDLSDK/include
"
if [[ "$DEBUG" == 1 ]]; then
    CARGS="
        $CARGS
        -g
        -O0
        -fsanitize=undefined,unsigned-integer-overflow
        -fno-omit-frame-pointer
        -Wno-unused-variable
        -Wno-unused-but-set-variable
    "
else
    CARGS="
        $CARGS
        -g
        -O3
    "
fi

build_dep_obj() {
    local o_file="$1"
    local c_file="$2"
    shift 2
    if [[ "$c_file" -nt "$o_file" ]]; then
        clang -o "$o_file" -O3 "$@" -c "$c_file"
    fi
}

build_deps() {
    build_dep_obj bin/any_vendor.o           jaburns_cc/vendor/vendor_impl.c               -std=c11
    build_dep_obj bin/ed_watch_fs.o          jaburns_cc/sdlvk_app/watch_fs.c               -std=c11
    build_dep_obj bin/ed_imgui.o             jaburns_cc/vendor/imgui/imgui.cpp             -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
    build_dep_obj bin/ed_imgui_impl_sdl2.o   jaburns_cc/vendor/imgui/imgui_impl_sdl2.cpp   -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
    build_dep_obj bin/ed_imgui_impl_vulkan.o jaburns_cc/vendor/imgui/imgui_impl_vulkan.cpp -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
    build_dep_obj bin/ed_imgui_demo.o        jaburns_cc/vendor/imgui/imgui_demo.cpp        -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
    build_dep_obj bin/ed_imgui_draw.o        jaburns_cc/vendor/imgui/imgui_draw.cpp        -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
    build_dep_obj bin/ed_imgui_widgets.o     jaburns_cc/vendor/imgui/imgui_widgets.cpp     -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
    build_dep_obj bin/ed_imgui_tables.o      jaburns_cc/vendor/imgui/imgui_tables.cpp      -std=c++20 "-I$VKSDK/include" "-I$SDLSDK/include"
}

build_pch() {
    clang -std=c++20 $CARGS -x c++-header jaburns_cc/sdlvk/inc.hh -o jaburns_cc/sdlvk/inc.pch
}

build_main() {
    if [[ "$EDITOR" == 1 ]]; then
        local err="$(clang -std=c++20 $CARGS \
            jaburns_cc/sdlvk_app/main_dll.cc \
            -include-pch jaburns_cc/sdlvk/inc.pch \
            -bundle -fPIC -flat_namespace -undefined dynamic_lookup \
            -o bin/libreload.dylib \
            -fcolor-diagnostics 2> >(tee /dev/stderr))"

        if [[ "$err" == *'precompiled header'* ||  "$err" == *'PCH file'*  ]]; then
            build_pch
            build_main
            return
        fi

        [[ -n "$err" ]] && exit 1

        [[ "$DLL_ONLY" == 1 ]] && return
    else
        build_pch
    fi

    local link="-lSDL2 -L$SDLSDK/lib -lvulkan -L$VKSDK/lib bin/any_*.o"

    if [[ "$EDITOR" == 1 ]]; then
        link="$link bin/ed_*.o -lc++ -framework CoreServices" # CoreServices required for file watch API only
    fi

    clang -std=c++20 $CARGS $link \
        jaburns_cc/sdlvk_app/main_root.cc \
        -include-pch jaburns_cc/sdlvk/inc.pch \
        -o bin/sdlvk_app
}

#-------------------------------------------------------------------------------

mkdir -p bin
mkdir -p .vscode

build_shaders
[[ "$SHADERS_ONLY" == 1 ]] && exit 0

[[ "$VERIFY" == 1 ]] && verify_includes
update_vscode_config

build_deps
build_main

#-------------------------------------------------------------------------------